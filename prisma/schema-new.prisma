// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings        Booking[]
  auditLogs       AuditLog[]
  managedSlots    TimeSlot[] @relation("SlotManager")

  @@map("users")
}

model TimeSlot {
  id           String   @id @default(cuid())
  date         DateTime // UTC-Mitternacht
  startMinutes Int      // Minuten seit Mitternacht (z.B. 540 = 09:00)
  endMinutes   Int      // Minuten seit Mitternacht (z.B. 600 = 10:00)
  isOpen       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  managerId String?
  manager   User?    @relation("SlotManager", fields: [managerId], references: [id])
  bookings  Booking[]

  @@unique([date, startMinutes, endMinutes], map: "uniq_slot")
  @@index([date])
  @@index([isOpen])
  @@map("time_slots")
}

model Booking {
  id           String        @id @default(cuid())
  clientName   String
  clientEmail  String
  clientPhone  String?
  message      String?
  status       BookingStatus @default(REQUESTED)
  date         DateTime      // UTC-Mitternacht
  startMinutes Int           // Minuten seit Mitternacht
  endMinutes   Int           // Minuten seit Mitternacht
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([date, startMinutes, endMinutes])
  @@index([status])
  @@map("bookings")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  fileName  String?
  fileUrl   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  CLIENT
}

enum BookingStatus {
  REQUESTED
  CONFIRMED
  DECLINED
  CANCELLED
}

